package xyz.vopen.mixmicro.components.enhance.dbm.misc;

import xyz.vopen.mixmicro.components.enhance.dbm.repository.Repository;

import java.sql.SQLException;

/**
 * Base class that your data elements can extend which allow them to refresh, update, etc.
 * themselves. DBM ORM will automagically set the appropriate {@link Repository} on the class if it is
 * received by a query but if you are trying to create the class, you will need to either create it
 * through the Repository or set the repository on it directly with {@link #setRepository(Repository)}.
 *
 * <p><b>NOTE:</b> The default pattern is to use the {@link Repository} classes to operate on your data
 * classes. This will allow your data classes to have their own hierarchy and isolates the database
 * code in the Repositorys. However, you are free to use this base class if you prefer this pattern.
 *
 * <p><b>NOTE:</b> The internal Repository field has been marked with transient so that it won't be
 * serialized (thanks jc). If you do de-serialize on these classes, you will need to refresh it with
 * the Repository to get it to work again.
 *
 * @author <a href="mailto:iskp.me@gmail.com">Elve.Xu</a>
 */
public abstract class BaseRepositoryEnabled<T, ID> {

  protected transient Repository<T, ID> repository;

  /** A call through to the {@link Repository#create(Object)}. */
  public int create() throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.create(t);
  }

  /** A call through to the {@link Repository#refresh(Object)}. */
  public int refresh() throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.refresh(t);
  }

  /** A call through to the {@link Repository#update(Object)}. */
  public int update() throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.update(t);
  }

  /** A call through to the {@link Repository#updateId(Object, Object)}. */
  public int updateId(ID newId) throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.updateId(t, newId);
  }

  /** A call through to the {@link Repository#delete(Object)}. */
  public int delete() throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.delete(t);
  }

  /** A call through to the {@link Repository#objectToString(Object)}. */
  public String objectToString() {
    try {
      checkForRepository();
    } catch (SQLException e) {
      throw new IllegalArgumentException(e);
    }
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.objectToString(t);
  }

  /** A call through to the {@link Repository#extractId(Object)}. */
  public ID extractId() throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.extractId(t);
  }

  /** A call through to the {@link Repository#objectsEqual(Object, Object)}. */
  public boolean objectsEqual(T other) throws SQLException {
    checkForRepository();
    @SuppressWarnings("unchecked")
    T t = (T) this;
    return repository.objectsEqual(t, other);
  }

  /**
   * Return the Repository object associated with this object. It will be null unless the object was
   * generated by a query call to the database or {@link #setRepository(Repository)} has already been called.
   */
  public Repository<T, ID> getRepository() {
    return repository;
  }

  /**
   * Set the {@link Repository} on the object. For the {@link #create()} call to work, this must be done
   * beforehand by the caller. If the object has been received from a query call to the Repository then
   * this should have been set automagically.
   */
  public void setRepository(Repository<T, ID> repository) {
    this.repository = repository;
  }

  private void checkForRepository() throws SQLException {
    if (repository == null) {
      throw new SQLException("Repository has not been set on " + getClass() + " object: " + this);
    }
  }
}
